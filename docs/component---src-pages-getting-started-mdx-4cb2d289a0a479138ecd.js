"use strict";(self.webpackChunk_monodeploy_gatsby=self.webpackChunk_monodeploy_gatsby||[]).push([[530],{7049:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return i},default:function(){return c}});var t=a(9005),o=(a(3289),a(2967)),l=a(38),r=["components"],i={},p={_frontmatter:i},s=l.Z;function c(e){var n=e.components,a=(0,t.Z)(e,r);return(0,o.kt)(s,Object.assign({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"getting-started",style:{position:"relative"}},(0,o.kt)("a",{parentName:"h2",href:"#getting-started","aria-label":"getting started permalink",className:"anchor before"},(0,o.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Getting Started"),(0,o.kt)("p",null,"A minimum Node version of v14.0.0 and Yarn Berry is required."),(0,o.kt)("p",null,"Install ",(0,o.kt)("inlineCode",{parentName:"p"},"monodeploy"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D monodeploy\nyarn monodeploy --dry-run\n")),(0,o.kt)("p",null,"Edit your project's root ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Set "workspaces": ','["packages/*"]'," (you can use a different glob to match your monorepo layout)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"monodeploy.config.js")," file and set it to:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = { preset: 'monodeploy/preset-recommended' }\n")),(0,o.kt)("p",{parentName:"li"},"You'll be extending this file as you make changes to your project's publish configuration."))),(0,o.kt)("p",null,"For help with the CLI options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn monodeploy --help\n")),(0,o.kt)("p",null,"or see the ",(0,o.kt)("a",{parentName:"p",href:"../configuration"},"Configuration")," page for more details."),(0,o.kt)("h3",{id:"api",style:{position:"relative"}},(0,o.kt)("a",{parentName:"h3",href:"#api","aria-label":"api permalink",className:"anchor before"},(0,o.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"API"),(0,o.kt)("p",null,"Monodeploy supports both a Command Line Interface, as well as a Node API."),(0,o.kt)("h4",{id:"cli",style:{position:"relative"}},(0,o.kt)("a",{parentName:"h4",href:"#cli","aria-label":"cli permalink",className:"anchor before"},(0,o.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"CLI"),(0,o.kt)("p",null,"For the CLI, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--help")," flag for a list of options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn monodeploy --help\n")),(0,o.kt)("p",null,"If you are okay with the defaults, you can go ahead and add a call to monodeploy to your CI's publish stage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn monodeploy --push\n")),(0,o.kt)("p",null,"If you omit ",(0,o.kt)("inlineCode",{parentName:"p"},"--push"),", you can manually push the tags on success:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn monodeploy && git push --tags\n")),(0,o.kt)("p",null,"Or to give things a try first, run monodeploy in dry run mode with verbose logging. Dry run mode won't modify the remote registry, or git."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn monodeploy --dry-run --log-level 0\n")),(0,o.kt)("p",null,"The CLI provides a few sensible defaults, however if using the Node API, you will have to provide all relevant information."),(0,o.kt)("p",null,"You can also pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"--config-file")," flag to load options from a configuration file. The file should export an object matching the MonodeployConfiguration interface (with all properties as optional). CLI flags take precedence over the configuration file."),(0,o.kt)("p",null,"Example config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n    dryRun: false,\n    git: {\n        commitSha: 'HEAD',\n        remote: 'origin',\n        push: true,\n    },\n    conventionalChangelogConfig: '@tophat/conventional-changelog-config',\n    access: 'infer',\n    persistVersions: false,\n    changesetIgnorePatterns: ['**/*.test.js'],\n}\n")),(0,o.kt)("h4",{id:"node-api",style:{position:"relative"}},(0,o.kt)("a",{parentName:"h4",href:"#node-api","aria-label":"node api permalink",className:"anchor before"},(0,o.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Node API"),(0,o.kt)("p",null,"To use the API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import type { MonodeployConfiguration }  from '@monodeploy/types'\nimport monodeploy from '@monodeploy/node'\n\ntry {\n    const config: MonodeployConfiguration = {\n        cwd: process.cwd(),\n        dryRun: false,\n        git: {\n            commitSha: 'HEAD',\n            remote: 'origin',\n            push: true,\n        },\n        conventionalChangelogConfig: '@tophat/conventional-changelog-config',\n        access: 'infer',\n        persistVersions: false,\n    }\n    const changeset = await monodeploy(config)\n} catch (err) {\n    console.error(err)\n}\n")),(0,o.kt)("p",null,"Note that configuration presets are not supported when using the Node API."),(0,o.kt)("h3",{id:"changelog",style:{position:"relative"}},(0,o.kt)("a",{parentName:"h3",href:"#changelog","aria-label":"changelog permalink",className:"anchor before"},(0,o.kt)("svg",{parentName:"a","aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"}))),"Changelog"),(0,o.kt)("p",null,"If you choose to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--changelog-filename CHANGELOG.md")," flag or related API config property, in your CHANGELOG.md file you'll need to insert a marker to let monodeploy know where to insert the changelog entries. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-md"},"# My Example Changelog\n\nSome blurb here.\n\n\x3c!-- MONODEPLOY:BELOW --\x3e\n\n## v1.0.0\n\nSome entry.\n")),(0,o.kt)("p",null,"The marker ",(0,o.kt)("inlineCode",{parentName:"p"},"\x3c!-- MONODEPLOY:BELOW --\x3e")," must match exactly. It is whitespace and case-sensitive."),(0,o.kt)("p",null,"You can use the template variable ",(0,o.kt)("inlineCode",{parentName:"p"},"<packageDir>")," to create individual changelogs per package, like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'--changelog-filename "<packageDir>/CHANGELOG.md"\n')))}c.isMDXComponent=!0},9005:function(e,n,a){function t(e,n){if(null==e)return{};var a,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}a.d(n,{Z:function(){return t}})}}]);
//# sourceMappingURL=component---src-pages-getting-started-mdx-4cb2d289a0a479138ecd.js.map